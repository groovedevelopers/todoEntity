@page "/"
@*@attribute [Authorize]*@
@using Microsoft.EntityFrameworkCore;

@using BlazorServerDbContextExample.Data;

@*@inject IUserService UserService*@
@inject IDbContextFactory<TodoContext> DbFactory
@inject NavigationManager Nav
@*@inject IPageHelper PageHelper*@



<div class="container m-5 p-2 rounded mx-auto bg-light shadow">
    <!-- App title section -->
    <div class="row m-1 p-4">
        <div class="col">
            <div class="p-1 h1 text-primary text-center mx-auto display-inline-block">
                <i class="fa fa-check bg-primary text-white rounded p-2"></i>
                <u>My Todo-s</u>
            </div>
        </div>
    </div>
    <!-- Create todo section -->
    <div class="row m-1 p-3">
        <div class="col col-11 mx-auto">
            <div class="row bg-white rounded shadow-sm p-2 add-todo-wrapper align-items-center justify-content-center">
                <div class="col">
                    <input class="form-control form-control-lg border-0 add-todo-input bg-transparent rounded" @bind="newTodo" type="text" placeholder="Add new ..">
                </div>

                <div class="col-auto px-0 mx-0 mr-2">
                    <button type="button" @onclick="AddTodo" class="btn btn-primary">Add</button>
                </div>
            </div>
        </div>
    </div>
    <div class="p-2 mx-4 border-black-25 border-bottom"></div>
    <!-- View options section -->
    <!-- Todo list section -->
    <div class="row mx-1 px-5 pb-3 w-80">
        <ul class="col mx-auto">
            <!-- Todo Item 1 -->
            
            @foreach (var todo in todos)
            {

<li style="display:flex; justify-content:space-between; ">
    @*<input type="checkbox" @bind="todo.IsDone"  />*@
    <span>@todo.Desc</span>
 

    <button class="btn btn-outline-red" @onclick="@(() => DeleteTodo(todo.Id))">Delete</button>
</li>}



        </ul>
    </div>
</div>





@code {
    private bool loading;
    @*private IEnumerable<User> users;*@

    protected override void OnInitialized()
    {
        loading = true;
        @*users = await UserService.GetAll();*@
    loading = false;
    getTodos();
}

private IList<Todo> todos = new List<Todo>();

private string newTodo;

@*private void AddTodo()
{
    if (!string.IsNullOrWhiteSpace(newTodo))
    {
        todos.Add(new Todo { Desc = newTodo });
        newTodo = string.Empty;
    }
}*@


private async Task AddTodo()
{

    if (!string.IsNullOrWhiteSpace(newTodo))
    {
        using var context = DbFactory.CreateDbContext();

        // this just attaches
        context.Todo.Add(new Todo { Desc = newTodo });

        try
        {
            await context.SaveChangesAsync();
            getTodos();
            @*Success = true;*@
            @*Error = false;*@
            // ready for the next
            @*Contact = new Contact();*@
            @*Busy = false;*@
        }
        catch (Exception ex)
        {
            @*Success = false;*@
            @*Error = true;*@
            @*ErrorMessage = ex.Message;*@
            @*Busy = false;*@
        }
    }


}




private  async Task DeleteTodo( int index)
{
    Console.Write("gfghn");

    using var context = DbFactory.CreateDbContext();

    var todo = context.Todo.Find(index);


    if (todo != null)
    {
        context.Todo.Remove(todo);
        await context.SaveChangesAsync();
        getTodos();


    }


}



private void getTodos()

{



    var context = DbFactory.CreateDbContext();



    // run the query to load the current page
    todos = context.Todo.ToList();



} }